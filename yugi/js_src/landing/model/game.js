/**
 * Represents the meta-information for a single game.
 */

goog.provide('yugi.landing.model.Game');

goog.require('goog.Disposable');
goog.require('goog.debug.Logger');
goog.require('yugi.model.util');



/**
 * Represents the meta-information for a single game.
 * @param {string} key The game key that uniquely identifies this game on the
 *     server.
 * @param {string} name The name of the game given by the user or assigned by
 *     the server during creation.
 * @constructor
 * @extends {goog.Disposable}
 */
yugi.landing.model.Game = function(key, name) {
  goog.base(this);

  /**
   * @type {string}
   * @private
   */
  this.key_ = key;

  /**
   * @type {string}
   * @private
   */
  this.name_ = name;
};
goog.inherits(yugi.landing.model.Game, goog.Disposable);


/**
 * @type {!goog.debug.Logger}
 * @protected
 */
yugi.landing.model.Game.prototype.logger = goog.debug.Logger.getLogger(
    'yugi.landing.model.Game');


/**
 * @return {string} The game key generated by the server.
 */
yugi.landing.model.Game.prototype.getKey = function() {
  return this.key_;
};


/**
 * @return {string} The name given to the game by the user or the server.
 */
yugi.landing.model.Game.prototype.getName = function() {
  return this.name_;
};


/**
 * Joins this game.
 * @param {string} playerName The name of the player.
 */
yugi.landing.model.Game.prototype.join = function(playerName) {
  this.logger.info('Joining existing game.  ' + this.toString());
  yugi.model.util.joinGame(playerName, this.getKey());
};


/**
 * @return {string} The string representation of this object.
 */
yugi.landing.model.Game.prototype.toString = function() {
  return 'key: ' + this.getKey() + ' name: ' + this.getName();
};
